#pragma once
#include "JuceHeader.h"
#include "dexed/Source/PluginProcessor.h"
#include "base64.h"
class CustomSynthPlugin:
        public tracktion_engine::Plugin,
        public juce::MPESynthesiser
{
public:
    inline static const juce::String xmlTypeName = "CustomSynth";

    CustomSynthPlugin (tracktion_engine::PluginCreationInfo info) : tracktion_engine::Plugin(info){
        processor = std::make_unique<DexedAudioProcessor>();
    }

    String getName() const override {
        return juce::String("Custom");
    }

    String getPluginType() override {
        return juce::String("Synth");
    }

    void initialise(const tracktion::PluginInitialisationInfo &info) override {

        std::string base64Category = "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";
        std::string output = base64_decode(base64Category,true);
        Cartridge bridge;
        bridge.load((uint8 *)output.data(),output.size());
        processor->loadCartridge(bridge);
        processor->setMonoMode(true);
        processor->prepareToPlay(info.sampleRate,info.blockSizeSamples);
        processor->setCurrentProgram(1);
    }

    void deinitialise() override {

    }

    void applyToBuffer(const tracktion::PluginRenderContext &context) override {
        if(processor == nullptr) {
            return;
        }
        if(context.destBuffer == nullptr) {
            return;
        }
        juce::MidiBuffer midiBuffer;
        if(context.bufferForMidiMessages != nullptr) {
            for(auto m : *context.bufferForMidiMessages) {
                std::cout << "Event " << m.isNoteOn() << std::endl;
                midiBuffer.addEvent(m,0);
            }
        }
        processor->processBlock(*context.destBuffer,midiBuffer);
    }

    bool needsConstantBufferSize() override {
        return false;
    }

    String getSelectableDescription() override {
        return juce::String("Synth");
    }

private:
    std::unique_ptr<DexedAudioProcessor> processor;

};


